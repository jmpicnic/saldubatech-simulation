akka {

  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  #loggers = ["akka.event.slf4j.Slf4jLogger"]
  #loggers = ["akka.event.logging$Defaultlogger"]
  loggers = [akka.testkit.TestEventListener]
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  log-dead-letters = 10
  log-dead-letters-during-shutdown = on

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "WARNING"

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream.
  #logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  actor {
    debug {
      # enable function of Actor.loggable(), which is to log any received message
      # at DEBUG level, see the “Testing Actor Systems” section of the Akka
      # Documentation at http://akka.io/docs
      receive = on

      # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill etc.)
      autoreceive = off

      # enable DEBUG logging of actor lifecycle changes
      lifecycle = off

      # enable DEBUG logging of all LoggingFSMs for events, transitions and timers
      fsm = off

      # enable DEBUG logging of subscription changes on the eventStream
      event-stream = off

      # enable DEBUG logging of unhandled messages
      unhandled = on

      # enable WARN logging of misconfigured routers
      router-misconfiguration = off

      default-mailbox {
        mailbox-type = "akka.dispatch.SingleConsumerOnlyUnboundedMailbox"
      }
    }
  }

  ssl-config {
    protocol = "TLSv1"
    enabledProtocols = [
      "TLSv1.2",
      "TLSv1.1",
      "TLSv1"
    ]

    debug = {
      ssl = true
      sslctx = true
      handshake = true
      verbose = true
      data = true
    }
  }


  test {
    # factor by which to scale timeouts during tests, e.g. to account for shared
    # build system load
    timefactor =  1.0

    # duration of EventFilter.intercept waits after the block is finished until
    # all required messages are received
    filter-leeway = 3s

    # duration to wait in expectMsg and friends outside of within() block
    # by default, will be dilated by the timefactor.
    single-expect-default = 3s

    # The timeout that is added as an implicit by DefaultTimeout trait
    default-timeout = 5s

    calling-thread-dispatcher {
      type = akka.testkit.CallingThreadDispatcherConfigurator
    }
  }
}
testPgDb = {
  connectionPool = "HikariCP" //use HikariCP for our connection pool
  dataSourceClass = "org.postgresql.ds.PGSimpleDataSource" //Simple datasource with no connection pooling. The connection pool has already been specified with HikariCP.
  properties = {
    serverName = "localhost"
    portNumber = "5432"
    databaseName = "salduba.events"
    user = "salduba_develop"
    password = "4Salduba$"
  }
  numThreads = 10
  autocommit = true
}
casesDB = {
  connectionPool = "HikariCP" //use HikariCP for our connection pool
  dataSourceClass = "org.postgresql.ds.PGSimpleDataSource" //Simple datasource with no connection pooling. The connection pool has already been specified with HikariCP.
  properties = {
    serverName = "localhost"
    portNumber = "5432"
    databaseName = "salduba.events"
    user = "salduba_develop"
    password = "4Salduba$"
  }
  numThreads = 10
  autocommit = true
}


//
//  actor {
//    provider = "cluster"
//
//    default-dispatcher {
//      # Throughput for default Dispatcher, set to 1 for as fair as possible
//      throughput = 10
//    }
//  }
//
//  remote {
//    # The port clients should connect to. Default is 2552.
//    netty.tcp.port = 4711
//  }
